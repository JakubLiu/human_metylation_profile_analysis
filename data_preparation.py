# QBA LIU 2023 --------------------------------------------------------------------------------------------------------------------------
import pandas as pd

# preparing response variable dataframe -----------------------------------------------------------------------
# reading and cleaning the data
match_missmatch = pd.read_csv("C:/Users/Lenovo/Desktop/STUDIA/BIOINFORMATYKA/METYLACJA/KLASYFIKACJA/designmethylation3.csv", sep = ';')
match_missmatch.columns = ['ID_metylacja', 'early_stress', 'late_stress', 'x']
match_missmatch.drop(match_missmatch.columns[-1], axis = 1, inplace=True)
new_col = []

# adding new column 'Match/MissMatch'
for i in range(0, len(match_missmatch.index)):
    new_col.append(0)
    
match_missmatch['Match/MissMatch'] = new_col

# populating new column 'MatchMissMatch'
for row_num in range(0, len(match_missmatch.index)):
    if match_missmatch['early_stress'][row_num] == match_missmatch['late_stress'][row_num]:
        match_missmatch['Match/MissMatch'][row_num] = 1         # match
    else:
        match_missmatch['Match/MissMatch'][row_num] = 0         # missmatch


# removing unnesecary columns
match_missmatch.drop(match_missmatch.columns[1:3], axis = 1, inplace=True)

# preparing predictor variable dataframe ----------------------------------------------------------------------------
# importing lists created in bash
SWM_list = [20.20,22.70,18.30,18.30,22.70,23.20,21.10,20.00,44.10,20.30,'NULL','NULL',22.40,31.90,21.00,18.30,19.50,68.10,22.70,20.30,'NULL',23.50,21.00,'NULL',22.30,34.30,26.70,61.10,25.00,18.30,22.80,24.80,21.10,21.10,27.00,26.60,25.20,20.00,34.30,20.30,18.30,21.10,32.20,21.00,44.10,18.30,45.20,'NULL',31.90,22.80,21.00,22.70,18.20,22.50,16.70,21.10,'NULL',22.80,'NULL',35.00,'NULL','NULL',45.20,38.40,21.00,21.00,'NULL',31.90,23.00,21.10,'NULL',45.20,21.00,30.00,31.90,30.80,30.00,20.00,22.30,21.00,30.00,45.20,22.40,18.40,23.00,23.00,21.10]
wiek_list = [18.00,20.00,20.00,21.00,19.00,22.00,21.00,19.00,20.00,21.00,22.00,20.00,21.00,24.00,20.00,23.00,20.00,23.00,21.00,23.00,19.00,22.00,19.00,19.00,22.00,22.00,25.00,21.00,19.00,22.00,21.00,25.00,21.00,21.00,22.00,23.00,22.00,21.00,24.00,21.00,24.00,21.00,20.00,22.00,20.00,21.00,22.00,22.00,24.00,22.00,21.00,22.00,21.00,25.00,24.00,21.00,19.00,24.00,21.00,20.00,19.00,21.00,24.00,20.00,21.00,22.00,19.00,22.00,22.00,21.00,24.00,25.00,19.00,23.00,22.00,25.00,24.00,20.00,25.00,20.00,20.00,24.00,25.00,22.00,20.00,19.00,23.00]
Raven_list = [29.00,15.00,27.00,26.00,13.00,21.00,25.00,19.00,11.00,6.00,16.00,18.00,25.00,12.00,23.00,13.00,21.00,13.00,28.00,18.00,14.00,21.00,11.00,12.00,13.00,23.00,27.00,21.00,22.00,14.00,22.00,22.00,22.00,12.00,32.00,7.00,33.00,14.00,20.00,26.00,20.00,23.00,15.00,18.00,27.00,17.00,30.00,20.00,21.00,14.00,23.00,21.00,9.00,20.00,20.00,10.00,13.00,21.00,34.00,27.00,15.00,24.00,22.00,24.00,26.00,23.00,11.00,26.00,28.00,22.00,21.00,23.00,18.00,12.00,29.00,25.00,21.00,28.00,18.00,23.00,27.00,16.00,25.00,9.00,23.00,19.00,21.00]
SCL_social_list = [11.00,1.00,3.00,7.00,3.00,5.00,4.00,9.00,1.00,16.00,6.00,3.00,3.00,0.00,17.00,4.00,8.00,1.00,3.00,0.00,5.00,13.00,2.00,11.00,5.00,17.00,1.00,4.00,6.00,11.00,2.00,2.00,3.00,0.00,12.00,0.00,5.00,4.00,5.00,7.00,15.00,7.00,0.00,6.00,4.00,0.00,3.00,6.00,15.00,2.00,3.00,9.00,0.00,2.00,20.00,17.00,0.00,6.00,1.00,14.00,9.00,8.00,11.00,2.00,8.00,5.00,3.00,7.00,3.00,5.00,1.00,2.00,4.00,11.00,7.00,13.00,11.00,17.00,6.00,2.00,10.00,0.00,0.00,4.00,2.00,4.00,10.00]
SCL_vegetatvie_list = [6.00,4.00,7.00,8.00,3.00,5.00,1.00,7.00,0.00,12.00,3.00,0.00,4.00,0.00,12.00,0.00,15.00,0.00,5.00,4.00,6.00,1.00,2.00,0.00,1.00,7.00,10.00,3.00,4.00,10.00,2.00,2.00,4.00,0.00,3.00,0.00,5.00,4.00,11.00,4.00,4.00,0.00,6.00,4.00,9.00,4.00,4.00,13.00,18.00,7.00,7.00,7.00,2.00,8.00,14.00,3.00,3.00,5.00,6.00,5.00,8.00,2.00,13.00,5.00,9.00,1.00,0.00,6.00,7.00,3.00,4.00,1.00,1.00,8.00,4.00,9.00,6.00,7.00,2.00,8.00,9.00,0.00,2.00,3.00,2.00,1.00,0.00]
SCL_pain_list = [11.00,3.00,11.00,10.00,6.00,6.00,12.00,11.00,7.00,12.00,11.00,5.00,8.00,3.00,7.00,4.00,20.00,6.00,7.00,2.00,10.00,9.00,7.00,1.00,4.00,7.00,7.00,11.00,5.00,8.00,7.00,8.00,12.00,1.00,0.00,13.00,8.00,7.00,15.00,3.00,9.00,0.00,8.00,4.00,4.00,4.00,0.00,9.00,8.00,10.00,5.00,11.00,4.00,11.00,13.00,5.00,6.00,8.00,4.00,7.00,5.00,4.00,10.00,11.00,5.00,6.00,4.00,9.00,8.00,7.00,9.00,5.00,9.00,7.00,4.00,6.00,10.00,3.00,8.00,11.00,10.00,1.00,4.00,5.00,5.00,3.00,9.00]
SCL_agora_list = [5.00,0.00,1.00,1.00,1.00,0.00,5.00,5.00,0.00,11.00,0.00,0.00,1.00,0.00,10.00,0.00,10.00,0.00,0.00,0.00,3.00,5.00,3.00,2.00,0.00,0.00,0.00,1.00,3.00,2.00,0.00,0.00,0.00,0.00,3.00,0.00,0.00,0.00,1.00,7.00,5.00,1.00,0.00,0.00,1.00,0.00,0.00,3.00,10.00,0.00,0.00,5.00,0.00,1.00,4.00,0.00,0.00,4.00,0.00,2.00,4.00,3.00,3.00,2.00,5.00,0.00,0.00,1.00,3.00,1.00,0.00,1.00,3.00,1.00,5.00,2.00,6.00,0.00,3.00,6.00,0.00,0.00,0.00,0.00,0.00,7.00,1.00]
SCL_depr_curr_list = [3.00,3.00,3.00,8.00,3.00,5.00,7.00,4.00,0.00,20.00,3.00,5.00,0.00,1.00,10.00,2.00,12.00,0.00,0.00,2.00,2.00,6.00,3.00,2.00,2.00,13.00,3.00,3.00,3.00,10.00,3.00,2.00,5.00,0.00,9.00,5.00,0.00,10.00,3.00,5.00,8.00,5.00,1.00,2.00,2.00,0.00,0.00,4.00,9.00,7.00,4.00,7.00,0.00,1.00,8.00,3.00,1.00,0.00,6.00,5.00,8.00,7.00,6.00,1.00,7.00,7.00,0.00,6.00,4.00,4.00,16.00,4.00,3.00,5.00,14.00,5.00,1.00,12.00,3.00,6.00,1.00,0.00,0.00,1.00,1.00,1.00,8.00]
SCL_depr_life_list = [1.00,0.00,0.00,0.00,0.00,0.00,0.00,4.00,0.00,5.00,1.00,0.00,0.00,0.00,5.00,0.00,4.00,0.00,0.00,0.00,2.00,1.00,0.00,2.00,1.00,4.00,5.00,1.00,0.00,3.00,2.00,0.00,3.00,0.00,2.00,0.00,3.00,3.00,3.00,1.00,5.00,3.00,0.00,2.00,3.00,2.00,2.00,0.00,0.00,1.00,1.00,3.00,0.00,1.00,4.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,5.00,2.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00]
SCL_all_list = [37.00,11.00,25.00,34.00,16.00,21.00,29.00,40.00,8.00,76.00,24.00,13.00,16.00,4.00,61.00,10.00,69.00,7.00,15.00,8.00,28.00,35.00,17.00,18.00,13.00,48.00,26.00,23.00,21.00,44.00,16.00,14.00,27.00,1.00,29.00,18.00,21.00,28.00,38.00,27.00,46.00,16.00,15.00,18.00,23.00,10.00,9.00,35.00,60.00,27.00,20.00,42.00,6.00,24.00,63.00,30.00,10.00,23.00,17.00,33.00,34.00,24.00,43.00,21.00,34.00,19.00,7.00,29.00,25.00,20.00,30.00,13.00,20.00,32.00,34.00,40.00,36.00,39.00,22.00,33.00,30.00,1.00,6.00,13.00,10.00,16.00,28.00]
Audit_suma_list = [3.00,5.00,5.00,9.00,8.00,7.00,6.00,16.00,9.00,15.00,9.00,2.00,4.00,2.00,12.00,9.00,6.00,4.00,2.00,5.00,7.00,1.00,6.00,5.00,2.00,20.00,6.00,6.00,5.00,20.00,4.00,2.00,0.00,2.00,11.00,10.00,2.00,20.00,2.00,12.00,8.00,2.00,8.00,9.00,1.00,5.00,5.00,9.00,6.00,2.00,7.00,8.00,2.00,1.00,7.00,4.00,1.00,6.00,9.00,0.00,3.00,4.00,1.00,5.00,8.00,5.00,5.00,7.00,7.00,12.00,6.00,5.00,4.00,22.00,16.00,6.00,12.00,4.00,2.00,2.00,17.00,7.00,7.00,10.00,0.00,2.00,1.00]
Patient_ID_list = ['E_56_Met_D2_51_8600_296_S64','E_71_MET_D17_38_8600_126_S113','E_237_Met_D85_S33','E_65_Met_D11_38_8600_164_S89','E_238_MetD86_51_8600_080_S54','E_70_MET_D16_51_8600_016_S112','E_240_51_8600_197_Met_D88_S2','E_66_Met_D12_38_8600_182_S108','E_235_Met_D83_S3','E_68_Met_D14_51_8600_099_S110','E_178_51_8600_104_S54','E_226_38_8600_176_MetD74_S61','E_58_Met_D4_51_8600_106_S66','E_214_51_8600_226_Met_D62_S47','E_59_Met_D5_38_8600_163_S67','E_219_MetD67_51_8600_127_S12','E_177_Met_D19_S15','E_236_Met_D84_S14','E_64_Met_D10_51_8600_108_S88','E_239_51_8610_326_Met_D87_S99','E_67_Met_D13_38_8600_044_S109','E_179_Met_D21_51_8600_201_S80','E_180_Met_D22_51_8600_260_S34','E_181_Met_D23_51_8600_283_S63','E_69_Met_D15_51_8600_246_S111','E_63_Met_D9_51_8600_056_S87','E_57_Met_D3_S25','E_61_Met_D7_51_8610_360_S85','E_73_MET_D19_51_8600_123_S125','E_189_51_8600_125_S34','E_76_MET_D22_51_8600_273_S91','E_199_38_8600_224_Met_D47_S61','E_72_Met_D39_S5','E_55_Met_D1_38_8600_127_S63','E_183_Met_D25_38_8610_202_S64','E_190_Met_D32_51_8600_062_S122','E_184_Met_D26_S26','E_185_MetD27_38_8600_189_S84','E_186_Met_D28_S16','E_60_Met_D6_38_8600_053_S68','E_187_Met_D29_51_8610_384_S102','E_196_Met_D38_S47','E_191_Met_D33_S34','E_192_Met_D34_S37','E_198_38_8600_155_Met_D46_S54','E_77_MET_D23_51_8610_328_S128','E_200_38_8600_207_Met_D48_S62','E_74_MET_D20_38_8600_195_S126','E_201_51_8600_178_S48','E_193_Met_D35_51_8600_182_S55,E194_Met_D36_51_8600_105_S48','E_195_MetD37_51_8600_225_S10','E_182_51_8610_392_S73,E188_Met_D30_51_8600_208_S121,E197_Met_D45_51_8600_155_S49','E_75_MET_D21_38_8600_177_S127','E_202_38_8600_028_Met_D50_S2,E203_Met_D51_51_8610_376_S27','E_205_38_8600_029_Met_D53_S28','E_204_MetD52_51_8600_242_S2','E_215_38_8600_119_Met_D63_S53','E_216_51_8600_299_Met_D64_S68','E_217_38_8610_223_S62','E_218_Met_D66_S1','E_206_MetD54_51_8600_097_S32','E_207_51_8600_027_Met_D55_S1','E_208_Met_D56_S17','E_209_Met_D57_S35','E_221_MetD69_38_8610_222_S34','E_222_38_8600_077_Met_D70_S46','E_223_38_8600_143_Met_D71_S48','E_224_MetD72_38_8600_023_S58','E_228_38_8600_114_Met_D76_S16','E_210_MetD58_51_8600_288_S33','E_225_38_8600_091_S67','E_62_Met_D8_38_8600_165_S86','E_78_Met_D11_JonCzab_S32','E_211_Met_D59_S49','E_212_38_8600_051_Met_D60_S43','E_229_Met_D77_S32','E_230_51_8600_040_Met_D78_S43','E_227_Met_D75_S13','E_231_51_8600_136_Met_D79_S98','E_233_51_8600_003_S68','E_232_MetD80_51_8600_014_S90','E_234_51_8610_396_S33','E_213_MetD61_51_8610_383_S51']

# getting column names -----------------------------------------------------------------------------------------------
df_raw = pd.read_csv("C:/Users/Lenovo/Desktop/STUDIA/BIOINFORMATYKA/METYLACJA/KLASYFIKACJA/Dane_behawior.csv", sep = ';', decimal = '.')
predictor_variable_df_header = list(df_raw.columns)

# creating dataframe -----------------------------------------------------------------------------------------------
predictor_variable_df = pd.DataFrame(list(zip(Patient_ID_list, SWM_list, wiek_list, Raven_list, SCL_social_list, SCL_vegetatvie_list, SCL_pain_list, SCL_agora_list, SCL_depr_curr_list, SCL_depr_life_list, SCL_all_list, Audit_suma_list)),
               columns =predictor_variable_df_header)

# merging the two datasets ----------------------------------------------------------------------------------------
full_data = pd.merge(match_missmatch, predictor_variable_df, on = 'ID_metylacja')


# exporting the dataframe -----------------------------------------------------------------------------------------
full_data.to_csv('C:/Users/Lenovo/Desktop/STUDIA/BIOINFORMATYKA/METYLACJA/KLASYFIKACJA/full_data.csv')
